[{"content":"指针是能够存放一个地址的一组存储单元(通常2或4个字节).\n运算符 \u0026amp; 可以取用一个对象的地址.\np = \u0026amp;c; 可以把c的地址赋给p. p是指向c的指针.\n地址运算符\u0026amp;只能应用于内存中的对象, 即变量(variable)与数组元素(array elements). 不能作用于表达式(expression), 常量(constant) 或register类型的变量.\n一元运算符 * 是间接寻址或间接引用运算符.当作用于指针将访问指针所指向的对象.\nint *ip 该语句表明表达式 *ip的结果是int类型. 该语法与声明变量(variable)的语法与声明该变量所在表达式的语法相似.因此, 对函数的声明也可采用这种方式.例:\ndouble *dp, atof(char *); 指针只能指向某种特定类型的对象. (例外: 指向void类型的指针可以存放指向任何类型的指针,但不能间接引用其自身).\n若要达成修改主函数值的目标, 可以将指向所需的变量的指针传递给被调用函数\nswap(\u0026amp;a,\u0026amp;b) swap声明中所有参数都声明为指针, 并且通过这些指针来间接访问他们所指向的值.\nvoid swap(int *px, int *py){ int temp; temp = *px; *px = *py; *py = temp; } int a[10]; 定义一个长度为10的数组a, a[i] 则表示该数组的第i个元素.\n声明\nint *pa; pa = \u0026amp;a[0] 则将指针pa指向数组的第0个元素. (pa的值为数组元素a[0]的地址). 这样, 赋值语句\nx = *pa; 则能把a[0]中的内容复制到x中.\n根据指针运算的定义. pa + 1将指向数组的下一个元素. pa + i 将指向 pa 所指元素之后的第 i 个元素. pa - i 将指向 pa 所指元素之前的第 i 个元素. 例: *(pa + 1) 引用的是数组元素 a[1] 的内容.\n执行赋值语句\npa = \u0026amp;a[0] 后, pa 和 a具有相同的值. 因为数组名所代表的就是该数组最开始的一个元素的地址.因此以上赋值语句可以写成:\npa = a; 因此, 通过数组和下标实现的表达式可等价的通过指针和偏移量实现.\n但不同之处在于, 指针是一个变量, 因此 pa = a 和 pa++ 都是合法的, 而数组名不是变量.\n在函数定义中,\nchar s[] 和\nchar *s 是等价的.\n指针的初始化: 有意义的指针初始化只能是0或者是表示地址的表达式, 对后者来说, 表达式所代表的地址必须是在此之前已定义的具有适当类型的数据的地址.\nC语言保证, 0永远不是有效的数据地址, 因此, 返回值0可以表示发生了异常事件.\n指针与整数不能互相转换, 但0是唯一例外. 常量0可以赋值给指针, 指针也可以和0进行比较. 程序中常使用符号常量NULL代替常量0 (定义在标准头文件 \u0026lt;stddef.h\u0026gt;中).\n指针可以进行比较运算. 如果指针p和q指向同一数组的成员, 那么他们之间就可以进行类似的关系比较运算符. 例: 若p指向的数组元素位置在q指向的数组元素位置之前, 则表达式 p \u0026lt; q 的值为true.\n指针的算数运算具有一致性: 如果处理的数据类型是比字符型占据更多存储空间的浮点型, 并且p是一个指向浮点类型的指针, 那么在执行p++后, p将指向下一个浮点数的地址.\n有效的指针运算包括:\n相同类型指针之间的赋值运算,\n指针同整数之间的加法或减法运算,\n指向相同数组中元素的两个指针之间的减法或比较运算,\n将指针赋值为0或指针与0之间的比较运算.\n其他所有形式的指针运算都是非法的.\n以下定义有很大的差别:\nchar amessage[] = \u0026quot;now is the time\u0026quot;; /*定义一个数组*/ char *pmessage = \u0026quot;now is the time\u0026quot;; /*定义一个指针*/ amessage 是一个仅仅足以存放初始化字符串以及空字符'\\0' 的一维数组. 数组中单个字符可以进行修改, 但amessage始终指向同一个存储位置.\n另一方面, pmessage 是一个指针, 其值指向一个字符串常量.\n例:\n#define MAXLINES 5000 char *lineptr[MAXLINES] 表示lineptr是一个具有MAXLINES个元素的一维数组, 其中数组的每一个元素是一个指向char类型对象的指针. 也就是说, lineptr[i]是一个char指针, 而*lineptr[i]是该指针指向的第i个元素.\n由于lineptr本身是一个数组名, 可按照前面相同的方法将其作为指针使用.\n如果将二维数组作为参数传递给函数, 那么在函数的参数声明中必须指明数组的列数.\nf(int daytab[2][13]){...} 可以写成:\nf(int daytab[][13]){...} 因为行数不重要, 因此还可以改写成:\nf(int (*daytab)[13]){...} 这种声明形式标明参数是一个指针, 它指向具有13个整型元素的一维数组. 因为方括号[]的优先级高于*, 所以需要使用圆括号.\n否则将变成:\nint *daytab[13] 表示声明一个数组, 其有13个元素, 每一个元素都是一个指向int对象的指针.\n一般来说, 除数组的第一维(下标)可以不指定大小, 其余各维都必须明确指定大小.\n略(与其他类型对象的初始化语法相似)\n有如下两个定义:\nint a[10][20] int *b[20] 从语法角度来说, a[3][4]和b[3][4]都是对一个int 对象的合法引用, 但a是一个真正的二维数组,分配了200个int类型长度的空间. 但是b定义仅仅分配了20个指针, 并且没有初始化, 他们的初始化必须以显式的方式进行,如static初始化或通过代码初始化.\n指针数组的一个重要优点在于, 数组的每一行长度可以不同.\n调用主函数main时, 它带有两个参数. 第一个参数(argc, 用于参数计数)的值表示运行程序时命令行中参数的数目, 第二个参数(argv, 用于参数向量)是一个指向字符串数组的指针, 其中每一个字符串对应一个参数.\n按照C语言约定, argv[0]是启动该程序的程序名, 因此argc的值至少为1.\nANSI 要求argv[argc]的值必须为一空指针.\n定义qsort为:\nvoid qsort(void *lineptr, int left, int right, int (*comp)(void *,void *)); 其中, 指针数组参数的类型为通用指针void *. 由于任何类型的指针都可以转换成void *类并在转换回原来的类型时不丢失信息.\nqsort 的第四个参数声明如下\nint (*comp)(void *,void *) 它表明comp是一个指向函数的指针, 该函数具有两个void * 类型的参数, 其返回值类型为int.\n(略)\n","date":"2020-12-18T13:41:50+08:00","permalink":"https://example.com/p/c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/","title":"C程序设计语言笔记: 第五章 指针与数组"},{"content":"A personal site could do much with your interview and make you more competitive! In this paper I would share with you detailed steps for how to create a new public site using hugo, which is one of latest tools for building a site.\nGit\nGo \u0026gt; 1.11\nbrew install hugo or\nport install hugo if you are using MacPorts.\nThen you can simply jump to step 2 to continue.\nchoco install hugo -confirm or for the extended version:\nchoco install hugo-extended -confirm If you are using Scoopfor package management, you can install Hugo with following:\nscoop install hugo or\nscoop install hugo-extended for extended version.\nLinux can use Homebrew with the following one-liner:\nbrew install hugo which is the same as in Mac.\nhugo version it would show something that begin with:\nHugo Static Site Generator v0.79.0-1415EFDC and you can then go to the next step!\nhugo new site \u0026lt;name of your blog project\u0026gt; to initalize your blog.\nIn this example, I just name by blog project (it is not the name of the site) as \u0026ldquo;blog\u0026rdquo; and I could use the command:\nhugo new site blog to init it.\nat this stage, the project would be created at the path that you execute this command.\nIf you check the name of folders in the current path you could find a new folder named \u0026ldquo;blog\u0026rdquo; (or the naem you gave to it).\n\u0026gt;ls ... d----- 16/12/2020 11:16 AM blog ... (this is the way of windows showing the folder info).\nThen we enter the folder.\n\u0026gt;cd blog blog/\u0026gt;ls you could see the items that hugo has initialized for you.\nbasic toturial which is very time consuming and inefficient. Instead we can download existing themes that designed by others and make improvements based on it! themes.gohugo.io offers a wide range of themes that you could choose from.\nIn this example I would just choose one of it for demo.\n\r\rstack_theme\r\nOften there are detailed info about how to download it below the basic info of the theme.\nIn this example, it suggests me to use git to clone this theme under by site folder.\ngit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack then go to the themes/hugo-theme-stack/exampleSite and use the config inside the folder to replace the config.toml in the site root folder. Alternatively you can copy everything in the example site and overwrite things in your site root folder for a quicker start.\nFor some themes that using .yaml instead of .toml, you can delete the config.toml in the root folder and only leave the config.yaml provided by the theme as hugo is compatible of reading various format of config files.\nhugo server -t hugo-theme-stack --buildDrafts or simply\nhugo server if you have overwrite config.toml in the root folder.\nThe terminal would tell you the local address to visit your site.\nStart building sites … | EN -------------------+----- Pages | 27 Paginator pages | 0 Non-page files | 2 Static files | 0 Processed images | 8 Aliases | 13 Sitemaps | 1 Cleaned | 0 Built in 725 ms Watching for changes in \\blog\\{archetypes,assets,content,data,layouts,static,themes} Watching for config changes in \\blog\\config.yaml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Now you can go to the address and have a look with your new site!\nhugo new post/[name of your blog]/index.md create the basic structure of your blog.\nps: you could also simply use:\nhugo new post/[name].md to create your new post, but then if you want to attach images to your posts you would need to putting them mixed, which would increase the difficulty of maintence in the long run.\nThen you could go to the /post/ folder and edit the .md file using various tools that supports reading markdown file. Those .md would be the content of your post.\ntitle: the title of your post, you can edit as you wish, remember using quote if your title include spaces in it.\ndate: the time that the post was created, you could often leave it.\ndraft: true\nthis means this post is in draft mode, and would not included when building (mentioned later) you can leave it and avtivate \u0026ndash;buildDrafts flag when building the site or simply delete it if you think it is unnecessary.\nApart from these attributes, there are also some other attributes that can be included in the header:\ndescription: this part can be the subtitle of the post.\nslug: the slug of the post.\nimage: the image you want to put at the top of the post.\ncategories: the categories that you want to add to this post.\ntags: the tage of the post.\nThe format of using categories is:\ncategories: - Test - toturial or\ncategories: [Test,toturial] In this case, this post is categorized as Test and toturial on the site.\nthere may be more attributes that could be added in the header, you can find them here.\nhugo to build the site locally. (converting everything into html to get ready for deployment).\nTo put your site into Internet, you first need a respority to store all you resources for your site. Here we choose github as such store.\nwww.github.com\nor if you still not have one, register here.\n\r\rnew repo\r\nNote: the name of the repo has to be the same as your accout nick name.\nThe format of the repo name should be:\n[your username in lower case].github.io For example:\n\r\rrepo name\r\nensure that your repo is public so that other can visit your site!\n\r\rpub\r\nleave other as default or add anything you like in description.\nNow you get a empty repo ready to store your site contents!\nBuilding the site by overwriting baseUrl and theme.\nhugo --theme=hugo-theme-stack --baseUrl=\u0026quot;https://[your username].github.io\u0026quot; --buildDrafts (you can ignore the \u0026ndash;buildDrafts flag if you removed draft attributes in your posts that your wish to build)\nNow there would be a new folder named /public/ in your root folder.\nenter the public/ folder.\ncd public All contents in the public/ folder are contents that hugo built for you, you then just need to upload everything in this public/ folder to the remote repo.\nWe use git to complete this step:\nblog/public\u0026gt;git init blog/public\u0026gt;git add . blog/public\u0026gt;git commit -m \u0026quot;initial upload\u0026quot; blog/public\u0026gt;git remote add origin [your repo address for your site] blog/public\u0026gt;git push -u origin master then enter your username and password for your github account.\nWhen the push completed, you should be able to access your personal site without much trouble!\nYou can modify the strucure of the existing theme or even create on your own! Hugo Officical Site offered detailed instructions on how to customize your personal site and you can try it yourself!\n","date":"2020-12-17T10:55:23+08:00","permalink":"https://example.com/p/steps-to-create-a-personal-site-with-hugo/","title":"Steps to create a personal site with hugo"},{"content":"题目描述\n分子为1的分数称为埃及分数。现输入一个真分数(分子比分母小的分数，叫做真分数)，请将该分数分解为埃及分数。如：8/11 = 1/2+1/5+1/55+1/110。\n注：真分数指分子小于分母的分数，分子和分母有可能gcd不为1！\n如有多个解，请输出任意一个。\n请注意本题含有多组样例输入！\n【贪心算法】 设a、b为互质正整数，a\u0026lt;b 分数a/b 可用以下的步骤分解成若干个单位分数之和： 步骤一： 用b除以a，得商数q1及余数r1,即b=a*q1+r1 步骤二： a/b=1/(q1+1）+(a-r)/b(q1+1） 步骤三： 重复步骤2，直到分解完毕\n以上其实是数学家斐波那契提出的一种求解分数的贪心算法，准确的算法表述应该是这样的：\n设某个真分数的分子为a，分母为b;\n把c=(b/a+1)作为分解式中第一个分数的分母；( c = quotient+1)\n将a-b%a作为新的a； 将b*c作为新的b；( new a = quotient, new b *= quotient+1 )\n如果a等于1，则最后一个分数为1/b,算法结束；(if a = 1)\n如果a大于1但是a能整除b，则最后一个分数为1/(b/a),算法结束；(if a \u0026gt; 1 \u0026amp;\u0026amp; a%b = 0)\n否则重复上面的步骤。\n","date":"2020-12-16T09:58:57+08:00","permalink":"https://example.com/p/%E7%9C%9F%E5%88%86%E6%95%B0%E5%88%86%E8%A7%A3%E4%B8%BA%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0%E6%80%9D%E8%B7%AF/","title":"真分数分解为埃及分数思路"}]